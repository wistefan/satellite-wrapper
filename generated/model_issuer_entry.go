/*
 * Trusted Issuers Registry
 *
 * The subset of the [Trusted Issuers Registryas defined by EBSI](https://api-pilot.ebsi.eu/docs/apis/trusted-issuers-registry/v4#/) as currently required by the [VCVerifier](https://github.com/FIWARE/VCVerifier).  
 *
 * API version: v3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package generated

type IssuerEntry struct {

	// Issuer's DID
	Did string `json:"did"`

	// Link to issuer
	Href string `json:"href"`
}

// AssertIssuerEntryRequired checks if the required fields are not zero-ed
func AssertIssuerEntryRequired(obj IssuerEntry) error {
	elements := map[string]interface{}{
		"did": obj.Did,
		"href": obj.Href,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseIssuerEntryRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of IssuerEntry (e.g. [][]IssuerEntry), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseIssuerEntryRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aIssuerEntry, ok := obj.(IssuerEntry)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertIssuerEntryRequired(aIssuerEntry)
	})
}
