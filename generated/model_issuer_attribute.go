/*
 * Trusted Issuers Registry
 *
 * The subset of the [Trusted Issuers Registryas defined by EBSI](https://api-pilot.ebsi.eu/docs/apis/trusted-issuers-registry/v4#/) as currently required by the [VCVerifier](https://github.com/FIWARE/VCVerifier).  
 *
 * API version: v3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package generated

type IssuerAttribute struct {

	// sha256 hash of the payload
	Hash string `json:"hash"`

	// Base64 encoded content
	Body string `json:"body"`
}

// AssertIssuerAttributeRequired checks if the required fields are not zero-ed
func AssertIssuerAttributeRequired(obj IssuerAttribute) error {
	elements := map[string]interface{}{
		"hash": obj.Hash,
		"body": obj.Body,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseIssuerAttributeRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of IssuerAttribute (e.g. [][]IssuerAttribute), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseIssuerAttributeRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aIssuerAttribute, ok := obj.(IssuerAttribute)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertIssuerAttributeRequired(aIssuerAttribute)
	})
}
